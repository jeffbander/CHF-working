/**
 * TestSprite Generated Tests: Patients API
 * High Priority: P1 - Patient data management and HIPAA compliance
 * Generated by: TestSprite MCP v1.0.0
 */

import { describe, test, expect, beforeEach, afterEach } from '@jest/globals';
import { NextRequest } from 'next/server';
import { GET, POST } from '../../heartvoice-monitor/src/app/api/patients/route';

describe('Patients API - Critical Tests', () => {
  describe('GET /api/patients - Patient Retrieval', () => {
    test('should return all patients when no filters applied', async () => {
      const request = new NextRequest('http://localhost:3002/api/patients');
      const response = await GET(request);
      const data = await response.json();

      expect(response.status).toBe(200);
      expect(data).toHaveProperty('patients');
      expect(Array.isArray(data.patients)).toBe(true);
    });

    test('should filter patients by risk level', async () => {
      const riskLevels = ['low', 'medium', 'high', 'critical'];
      
      for (const riskLevel of riskLevels) {
        const request = new NextRequest(`http://localhost:3002/api/patients?riskLevel=${riskLevel}`);
        const response = await GET(request);
        const data = await response.json();

        expect(response.status).toBe(200);
        expect(data).toHaveProperty('patients');
        
        // Verify all returned patients have the correct risk level
        data.patients.forEach((patient: any) => {
          expect(patient.riskLevel).toBe(riskLevel);
        });
      }
    });

    test('should reject invalid risk level filters', async () => {
      const invalidRiskLevels = ['invalid', 'extreme', 'none', ''];
      
      for (const riskLevel of invalidRiskLevels) {
        const request = new NextRequest(`http://localhost:3002/api/patients?riskLevel=${riskLevel}`);
        const response = await GET(request);
        const data = await response.json();

        // Should return all patients or empty array, not error
        expect(response.status).toBe(200);
        expect(data).toHaveProperty('patients');
      }
    });

    test('should search patients by query string', async () => {
      const searchQueries = ['John', 'Playwright', '646'];
      
      for (const query of searchQueries) {
        const request = new NextRequest(`http://localhost:3002/api/patients?q=${encodeURIComponent(query)}`);
        const response = await GET(request);
        const data = await response.json();

        expect(response.status).toBe(200);
        expect(data).toHaveProperty('patients');
        
        // Verify search results contain the query term
        data.patients.forEach((patient: any) => {
          const patientString = JSON.stringify(patient).toLowerCase();
          expect(patientString).toContain(query.toLowerCase());
        });
      }
    });

    test('should filter patients by assigned clinician', async () => {
      const clinicianId = 'clinician-123';
      const request = new NextRequest(`http://localhost:3002/api/patients?clinicianId=${clinicianId}`);
      const response = await GET(request);
      const data = await response.json();

      expect(response.status).toBe(200);
      expect(data).toHaveProperty('patients');
      
      // Verify all returned patients are assigned to the clinician
      data.patients.forEach((patient: any) => {
        expect(patient.assignedClinician).toBe(clinicianId);
      });
    });

    test('should validate patient data structure', async () => {
      const request = new NextRequest('http://localhost:3002/api/patients');
      const response = await GET(request);
      const data = await response.json();

      expect(response.status).toBe(200);
      
      if (data.patients.length > 0) {
        const patient = data.patients[0];
        
        // Required fields for clinical use
        expect(patient).toHaveProperty('id');
        expect(patient).toHaveProperty('demographics');
        expect(patient.demographics).toHaveProperty('firstName');
        expect(patient.demographics).toHaveProperty('lastName');
        expect(patient.demographics).toHaveProperty('phoneNumber');
        expect(patient.demographics).toHaveProperty('dateOfBirth');
      }
    });
  });

  describe('POST /api/patients - Patient Creation', () => {
    test('should create patient with valid data', async () => {
      const newPatient = {
        demographics: {
          firstName: 'Jane',
          lastName: 'Doe',
          phoneNumber: '555-123-4567',
          dateOfBirth: '1980-01-01',
          gender: 'female'
        },
        medicalHistory: {
          heartFailureType: 'systolic',
          ejectionFraction: 35,
          nyhaClass: 'II'
        },
        assignedClinician: 'clinician-123'
      };

      const request = new NextRequest('http://localhost:3002/api/patients', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newPatient)
      });

      const response = await POST(request);
      const data = await response.json();

      expect(response.status).toBe(201);
      expect(data).toHaveProperty('patient');
      expect(data.patient).toHaveProperty('id');
      expect(data.patient.demographics.firstName).toBe('Jane');
      expect(data.patient.demographics.lastName).toBe('Doe');
    });

    test('should validate required fields', async () => {
      const invalidPatients = [
        {}, // Empty object
        { demographics: {} }, // Missing required demographics
        { demographics: { firstName: 'John' } }, // Missing lastName
        { demographics: { lastName: 'Doe' } }, // Missing firstName
        { demographics: { firstName: 'John', lastName: 'Doe' } } // Missing phoneNumber
      ];

      for (const invalidPatient of invalidPatients) {
        const request = new NextRequest('http://localhost:3002/api/patients', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(invalidPatient)
        });

        const response = await POST(request);
        expect(response.status).toBe(400);
      }
    });

    test('should validate phone number format', async () => {
      const phoneNumbers = [
        '555-123-4567', // Valid
        '(555) 123-4567', // Valid
        '+1-555-123-4567', // Valid
        '5551234567', // Valid
        '123', // Invalid - too short
        'abc-def-ghij', // Invalid - not numeric
        '', // Invalid - empty
      ];

      for (const phoneNumber of phoneNumbers) {
        const newPatient = {
          demographics: {
            firstName: 'Test',
            lastName: 'Patient',
            phoneNumber,
            dateOfBirth: '1980-01-01'
          }
        };

        const request = new NextRequest('http://localhost:3002/api/patients', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(newPatient)
        });

        const response = await POST(request);
        
        if (phoneNumber.length >= 10 && /\d/.test(phoneNumber)) {
          expect([200, 201]).toContain(response.status);
        } else {
          expect([400, 422]).toContain(response.status);
        }
      }
    });

    test('should validate medical history data types', async () => {
      const newPatient = {
        demographics: {
          firstName: 'Test',
          lastName: 'Patient',
          phoneNumber: '555-123-4567',
          dateOfBirth: '1980-01-01'
        },
        medicalHistory: {
          heartFailureType: 'systolic',
          ejectionFraction: 35,
          nyhaClass: 'II',
          medications: ['ACE inhibitor', 'Beta blocker']
        }
      };

      const request = new NextRequest('http://localhost:3002/api/patients', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newPatient)
      });

      const response = await POST(request);
      
      expect([200, 201]).toContain(response.status);
      
      if (response.status === 201) {
        const data = await response.json();
        expect(data.patient.medicalHistory.ejectionFraction).toBe(35);
        expect(Array.isArray(data.patient.medicalHistory.medications)).toBe(true);
      }
    });
  });

  describe('HIPAA Compliance and Security Tests', () => {
    test('should not expose sensitive data in error messages', async () => {
      const maliciousInput = {
        demographics: {
          firstName: '<script>alert("xss")</script>',
          lastName: 'DROP TABLE patients;',
          phoneNumber: '../../etc/passwd'
        }
      };

      const request = new NextRequest('http://localhost:3002/api/patients', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(maliciousInput)
      });

      const response = await POST(request);
      const responseText = await response.text();

      // Should not echo back malicious input
      expect(responseText).not.toContain('<script>');
      expect(responseText).not.toContain('DROP TABLE');
      expect(responseText).not.toContain('../../');
    });

    test('should validate date of birth format and ranges', async () => {
      const dateOfBirths = [
        '1980-01-01', // Valid
        '2000-12-31', // Valid
        '1900-01-01', // Edge case - very old
        '2025-01-01', // Invalid - future date
        'invalid-date', // Invalid format
        '', // Empty
      ];

      for (const dateOfBirth of dateOfBirths) {
        const newPatient = {
          demographics: {
            firstName: 'Test',
            lastName: 'Patient',
            phoneNumber: '555-123-4567',
            dateOfBirth
          }
        };

        const request = new NextRequest('http://localhost:3002/api/patients', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(newPatient)
        });

        const response = await POST(request);
        
        const isValidDate = /^\d{4}-\d{2}-\d{2}$/.test(dateOfBirth) && 
                           new Date(dateOfBirth) <= new Date();
        
        if (isValidDate) {
          expect([200, 201]).toContain(response.status);
        } else {
          expect([400, 422]).toContain(response.status);
        }
      }
    });

    test('should handle large payloads appropriately', async () => {
      const largePatient = {
        demographics: {
          firstName: 'A'.repeat(1000), // Very long name
          lastName: 'B'.repeat(1000),
          phoneNumber: '555-123-4567',
          dateOfBirth: '1980-01-01'
        },
        notes: 'C'.repeat(10000) // Very long notes
      };

      const request = new NextRequest('http://localhost:3002/api/patients', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(largePatient)
      });

      const response = await POST(request);
      
      // Should either accept or reject based on size limits
      expect([201, 400, 413]).toContain(response.status);
    });
  });

  describe('Performance Tests', () => {
    test('should respond quickly for clinical workflows', async () => {
      const startTime = Date.now();
      const request = new NextRequest('http://localhost:3002/api/patients');
      const response = await GET(request);
      const endTime = Date.now();

      expect(response.status).toBe(200);
      expect(endTime - startTime).toBeLessThan(3000); // 3 second max for patient lookup
    });

    test('should handle concurrent patient lookups', async () => {
      const requests = Array(5).fill(null).map(() => 
        GET(new NextRequest('http://localhost:3002/api/patients'))
      );

      const responses = await Promise.all(requests);
      
      responses.forEach(response => {
        expect(response.status).toBe(200);
      });
    });
  });
});
