/**
 * TestSprite Generated Basic API Tests
 * Simplified tests for immediate execution
 * Generated by: TestSprite MCP v1.0.0
 */

const { describe, test, expect } = require('@jest/globals');

describe('HeartVoice Monitor - Basic API Tests', () => {
  const baseUrl = 'http://localhost:3002';

  // Helper function to make HTTP requests
  async function makeRequest(endpoint, options = {}) {
    const url = `${baseUrl}${endpoint}`;
    try {
      const response = await fetch(url, options);
      const data = await response.json();
      return { response, data };
    } catch (error) {
      return { error };
    }
  }

  describe('Voice Analysis API', () => {
    test('should return voice analysis results', async () => {
      const { response, data, error } = await makeRequest('/api/voice-analysis');
      
      if (error) {
        console.log('API Error:', error.message);
        expect(error).toBeUndefined();
        return;
      }

      expect(response.status).toBe(200);
      expect(data).toHaveProperty('total');
      expect(data).toHaveProperty('results');
      expect(Array.isArray(data.results)).toBe(true);
      
      console.log(`✅ Voice Analysis API: ${data.total} results found`);
    });

    test('should validate biomarker data structure', async () => {
      const { response, data, error } = await makeRequest('/api/voice-analysis');
      
      if (error || !data.results || data.results.length === 0) {
        console.log('⚠️  No voice analysis data to validate');
        return;
      }

      const result = data.results[0];
      expect(result).toHaveProperty('biomarkers');
      expect(result.biomarkers).toHaveProperty('jitter');
      expect(result.biomarkers).toHaveProperty('shimmer');
      expect(result.biomarkers).toHaveProperty('hnr');
      expect(result.biomarkers).toHaveProperty('f0');
      
      console.log('✅ Biomarker structure validated');
    });

    test('should validate risk scores are in clinical range', async () => {
      const { response, data, error } = await makeRequest('/api/voice-analysis');
      
      if (error || !data.results) {
        console.log('⚠️  No voice analysis data to validate');
        return;
      }

      data.results.forEach((result, index) => {
        expect(result.riskScore).toBeGreaterThanOrEqual(0);
        expect(result.riskScore).toBeLessThanOrEqual(100);
        expect(typeof result.riskScore).toBe('number');
        console.log(`✅ Risk Score ${index + 1}: ${result.riskScore}/100 (valid)`);
      });
    });

    test('should include transcript data', async () => {
      const { response, data, error } = await makeRequest('/api/voice-analysis');
      
      if (error || !data.results) {
        console.log('⚠️  No voice analysis data to validate');
        return;
      }

      data.results.forEach((result, index) => {
        expect(result).toHaveProperty('transcript');
        expect(typeof result.transcript).toBe('string');
        expect(result.transcript.length).toBeGreaterThan(0);
        console.log(`✅ Transcript ${index + 1}: ${result.transcript.length} characters`);
      });
    });
  });

  describe('Patients API', () => {
    test('should return patient list', async () => {
      const { response, data, error } = await makeRequest('/api/patients');
      
      if (error) {
        console.log('API Error:', error.message);
        expect(error).toBeUndefined();
        return;
      }

      expect(response.status).toBe(200);
      expect(data).toHaveProperty('patients');
      expect(Array.isArray(data.patients)).toBe(true);
      
      console.log(`✅ Patients API: ${data.patients.length} patients found`);
    });

    test('should validate patient data structure', async () => {
      const { response, data, error } = await makeRequest('/api/patients');
      
      if (error || !data.patients || data.patients.length === 0) {
        console.log('⚠️  No patient data to validate');
        return;
      }

      const patient = data.patients[0];
      expect(patient).toHaveProperty('id');
      expect(patient).toHaveProperty('demographics');
      expect(patient.demographics).toHaveProperty('firstName');
      expect(patient.demographics).toHaveProperty('lastName');
      expect(patient.demographics).toHaveProperty('phoneNumber');
      
      console.log(`✅ Patient structure validated: ${patient.demographics.firstName} ${patient.demographics.lastName}`);
    });

    test('should filter patients by risk level', async () => {
      const riskLevels = ['low', 'medium', 'high', 'critical'];
      
      for (const riskLevel of riskLevels) {
        const { response, data, error } = await makeRequest(`/api/patients?riskLevel=${riskLevel}`);
        
        if (error) {
          console.log(`⚠️  Error testing risk level ${riskLevel}:`, error.message);
          continue;
        }

        expect(response.status).toBe(200);
        expect(data).toHaveProperty('patients');
        
        console.log(`✅ Risk level filter '${riskLevel}': ${data.patients.length} patients`);
      }
    });
  });

  describe('Call Scripts API', () => {
    test('should return call scripts', async () => {
      const { response, data, error } = await makeRequest('/api/call-scripts');
      
      if (error) {
        console.log('API Error:', error.message);
        expect(error).toBeUndefined();
        return;
      }

      expect(response.status).toBe(200);
      expect(data).toHaveProperty('success', true);
      expect(data).toHaveProperty('scripts');
      
      const scripts = data.scripts;
      expect(scripts).toHaveProperty('greeting');
      expect(scripts).toHaveProperty('voice_analysis');
      expect(scripts).toHaveProperty('conclusion');
      
      console.log('✅ Call Scripts API: All script phases available');
    });

    test('should validate script structure', async () => {
      const { response, data, error } = await makeRequest('/api/call-scripts');
      
      if (error || !data.scripts) {
        console.log('⚠️  No call scripts to validate');
        return;
      }

      const phases = ['greeting', 'voice_analysis', 'conclusion'];
      phases.forEach(phase => {
        const script = data.scripts[phase];
        expect(script).toHaveProperty('script');
        expect(typeof script.script).toBe('string');
        expect(script.script.length).toBeGreaterThan(0);
        
        console.log(`✅ ${phase} script: ${script.script.length} characters`);
      });
    });
  });

  describe('Performance Tests', () => {
    test('should respond quickly for clinical use', async () => {
      const endpoints = [
        '/api/voice-analysis',
        '/api/patients',
        '/api/call-scripts'
      ];

      for (const endpoint of endpoints) {
        const startTime = Date.now();
        const { response, error } = await makeRequest(endpoint);
        const endTime = Date.now();
        const responseTime = endTime - startTime;

        if (error) {
          console.log(`⚠️  Error testing ${endpoint}:`, error.message);
          continue;
        }

        expect(response.status).toBe(200);
        expect(responseTime).toBeLessThan(3000); // 3 second max for clinical use
        
        console.log(`✅ ${endpoint}: ${responseTime}ms response time`);
      }
    });
  });

  describe('System Health', () => {
    test('should have server running and responsive', async () => {
      const { response, error } = await makeRequest('/api/patients');
      
      if (error) {
        console.log('❌ Server not responding:', error.message);
        expect(error).toBeUndefined();
        return;
      }

      expect(response.status).toBe(200);
      console.log('✅ HeartVoice Monitor server is healthy and responsive');
    });

    test('should have voice analysis data available', async () => {
      const { response, data, error } = await makeRequest('/api/voice-analysis');
      
      if (error) {
        console.log('❌ Voice analysis not available:', error.message);
        return;
      }

      expect(response.status).toBe(200);
      expect(data.total).toBeGreaterThan(0);
      
      console.log(`✅ Voice analysis system active with ${data.total} results`);
    });

    test('should have patient data available', async () => {
      const { response, data, error } = await makeRequest('/api/patients');
      
      if (error) {
        console.log('❌ Patient data not available:', error.message);
        return;
      }

      expect(response.status).toBe(200);
      expect(data.patients.length).toBeGreaterThan(0);
      
      console.log(`✅ Patient management system active with ${data.patients.length} patients`);
    });
  });
});
