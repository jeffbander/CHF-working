/**
 * TestSprite Generated Tests: Voice Calls API
 * Critical Priority: P0 - Call initiation and management
 * Generated by: TestSprite MCP v1.0.0
 */

import { describe, test, expect, beforeEach, afterEach, jest } from '@jest/globals';
import { NextRequest } from 'next/server';
import { POST } from '../../heartvoice-monitor/src/app/api/voice-calls/route';

// Mock Twilio client
jest.mock('twilio', () => ({
  __esModule: true,
  default: jest.fn(() => ({
    calls: {
      create: jest.fn()
    }
  }))
}));

describe('Voice Calls API - Critical Tests', () => {
  let mockTwilioCall: any;

  beforeEach(() => {
    mockTwilioCall = {
      sid: 'CA1234567890abcdef1234567890abcdef',
      status: 'queued',
      to: '+16465565559',
      from: '+18445551234'
    };

    // Reset all mocks
    jest.clearAllMocks();
  });

  describe('POST /api/voice-calls - Call Initiation', () => {
    test('should successfully initiate a voice call with valid patient data', async () => {
      const mockTwilio = require('twilio');
      mockTwilio().calls.create.mockResolvedValue(mockTwilioCall);

      const requestBody = {
        patientId: 'patient-1758211577297-l6y2zg7gt',
        phoneNumber: '646-556-5559',
        patientName: 'John Playwright'
      };

      const request = new NextRequest('http://localhost:3002/api/voice-calls', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody)
      });

      const response = await POST(request);
      const data = await response.json();

      expect(response.status).toBe(200);
      expect(data).toHaveProperty('callSid');
      expect(data).toHaveProperty('status', 'queued');
      expect(data).toHaveProperty('patientName', 'John Playwright');
      expect(data).toHaveProperty('phoneNumber', '646-556-5559');
    });

    test('should validate required fields for call initiation', async () => {
      const invalidRequests = [
        {}, // Empty body
        { patientId: 'test' }, // Missing phone and name
        { phoneNumber: '646-556-5559' }, // Missing patient ID and name
        { patientName: 'Test Patient' } // Missing patient ID and phone
      ];

      for (const requestBody of invalidRequests) {
        const request = new NextRequest('http://localhost:3002/api/voice-calls', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(requestBody)
        });

        const response = await POST(request);
        expect(response.status).toBe(400);
      }
    });

    test('should validate phone number format', async () => {
      const mockTwilio = require('twilio');
      mockTwilio().calls.create.mockResolvedValue(mockTwilioCall);

      const validPhoneFormats = [
        '646-556-5559',
        '(646) 556-5559',
        '+1-646-556-5559',
        '6465565559'
      ];

      for (const phoneNumber of validPhoneFormats) {
        const requestBody = {
          patientId: 'patient-test-123',
          phoneNumber,
          patientName: 'Test Patient'
        };

        const request = new NextRequest('http://localhost:3002/api/voice-calls', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(requestBody)
        });

        const response = await POST(request);
        
        // Should either succeed or fail consistently
        expect([200, 400]).toContain(response.status);
      }
    });

    test('should handle Twilio API failures gracefully', async () => {
      const mockTwilio = require('twilio');
      mockTwilio().calls.create.mockRejectedValue(new Error('Twilio API Error'));

      const requestBody = {
        patientId: 'patient-test-123',
        phoneNumber: '646-556-5559',
        patientName: 'Test Patient'
      };

      const request = new NextRequest('http://localhost:3002/api/voice-calls', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody)
      });

      const response = await POST(request);
      
      expect(response.status).toBe(500);
      const data = await response.json();
      expect(data).toHaveProperty('error');
    });

    test('should include proper webhook URLs in Twilio call', async () => {
      const mockTwilio = require('twilio');
      const createCallSpy = jest.fn().mockResolvedValue(mockTwilioCall);
      mockTwilio().calls.create = createCallSpy;

      const requestBody = {
        patientId: 'patient-test-123',
        phoneNumber: '646-556-5559',
        patientName: 'Test Patient'
      };

      const request = new NextRequest('http://localhost:3002/api/voice-calls', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody)
      });

      await POST(request);

      expect(createCallSpy).toHaveBeenCalledWith(
        expect.objectContaining({
          url: expect.stringContaining('/api/voice-twiml'),
          statusCallback: expect.stringContaining('/api/twilio-status'),
          statusCallbackEvent: expect.arrayContaining(['initiated', 'ringing', 'answered', 'completed'])
        })
      );
    });
  });

  describe('Call Configuration Tests', () => {
    test('should use correct Twilio phone number', async () => {
      const mockTwilio = require('twilio');
      const createCallSpy = jest.fn().mockResolvedValue(mockTwilioCall);
      mockTwilio().calls.create = createCallSpy;

      const requestBody = {
        patientId: 'patient-test-123',
        phoneNumber: '646-556-5559',
        patientName: 'Test Patient'
      };

      const request = new NextRequest('http://localhost:3002/api/voice-calls', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody)
      });

      await POST(request);

      expect(createCallSpy).toHaveBeenCalledWith(
        expect.objectContaining({
          from: expect.stringMatching(/^\+1\d{10}$/), // Valid US phone number format
          to: expect.stringContaining('646-556-5559')
        })
      );
    });

    test('should set appropriate call timeout', async () => {
      const mockTwilio = require('twilio');
      const createCallSpy = jest.fn().mockResolvedValue(mockTwilioCall);
      mockTwilio().calls.create = createCallSpy;

      const requestBody = {
        patientId: 'patient-test-123',
        phoneNumber: '646-556-5559',
        patientName: 'Test Patient'
      };

      const request = new NextRequest('http://localhost:3002/api/voice-calls', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody)
      });

      await POST(request);

      expect(createCallSpy).toHaveBeenCalledWith(
        expect.objectContaining({
          timeout: expect.any(Number)
        })
      );
    });
  });

  describe('Security and Compliance Tests', () => {
    test('should not expose sensitive data in response', async () => {
      const mockTwilio = require('twilio');
      mockTwilio().calls.create.mockResolvedValue(mockTwilioCall);

      const requestBody = {
        patientId: 'patient-test-123',
        phoneNumber: '646-556-5559',
        patientName: 'Test Patient'
      };

      const request = new NextRequest('http://localhost:3002/api/voice-calls', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody)
      });

      const response = await POST(request);
      const data = await response.json();

      // Should not expose Twilio credentials or internal URLs
      expect(JSON.stringify(data)).not.toContain('SK'); // Twilio API key
      expect(JSON.stringify(data)).not.toContain('AC'); // Twilio Account SID (partial)
    });

    test('should validate patient ID format for security', async () => {
      const mockTwilio = require('twilio');
      mockTwilio().calls.create.mockResolvedValue(mockTwilioCall);

      const maliciousPatientIds = [
        '../../../etc/passwd',
        '<script>alert("xss")</script>',
        'DROP TABLE patients;',
        '../../config/secrets'
      ];

      for (const patientId of maliciousPatientIds) {
        const requestBody = {
          patientId,
          phoneNumber: '646-556-5559',
          patientName: 'Test Patient'
        };

        const request = new NextRequest('http://localhost:3002/api/voice-calls', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(requestBody)
        });

        const response = await POST(request);
        
        // Should reject malicious input
        expect([400, 403]).toContain(response.status);
      }
    });
  });

  describe('Performance and Reliability Tests', () => {
    test('should respond quickly for clinical use', async () => {
      const mockTwilio = require('twilio');
      mockTwilio().calls.create.mockResolvedValue(mockTwilioCall);

      const requestBody = {
        patientId: 'patient-test-123',
        phoneNumber: '646-556-5559',
        patientName: 'Test Patient'
      };

      const startTime = Date.now();
      const request = new NextRequest('http://localhost:3002/api/voice-calls', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestBody)
      });

      const response = await POST(request);
      const endTime = Date.now();

      expect(response.status).toBe(200);
      expect(endTime - startTime).toBeLessThan(5000); // 5 second max for call initiation
    });

    test('should handle rate limiting appropriately', async () => {
      const mockTwilio = require('twilio');
      mockTwilio().calls.create.mockResolvedValue(mockTwilioCall);

      const requestBody = {
        patientId: 'patient-test-123',
        phoneNumber: '646-556-5559',
        patientName: 'Test Patient'
      };

      // Simulate multiple rapid requests
      const requests = Array(10).fill(null).map(() => 
        POST(new NextRequest('http://localhost:3002/api/voice-calls', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(requestBody)
        }))
      );

      const responses = await Promise.all(requests);
      
      // Should handle multiple requests without crashing
      responses.forEach(response => {
        expect([200, 429]).toContain(response.status); // Success or rate limited
      });
    });
  });
});
