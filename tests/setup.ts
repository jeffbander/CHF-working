/**
 * TestSprite Generated Test Setup
 * Global test configuration for HeartVoice Monitor
 * Generated by: TestSprite MCP v1.0.0
 */

import { jest } from '@jest/globals';

// Extend Jest matchers
expect.extend({
  toBeValidPhoneNumber(received: string) {
    const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
    const pass = phoneRegex.test(received.replace(/[\s\-\(\)]/g, ''));
    
    if (pass) {
      return {
        message: () => `expected ${received} not to be a valid phone number`,
        pass: true,
      };
    } else {
      return {
        message: () => `expected ${received} to be a valid phone number`,
        pass: false,
      };
    }
  },
  
  toBeValidRiskScore(received: number) {
    const pass = typeof received === 'number' && received >= 0 && received <= 100;
    
    if (pass) {
      return {
        message: () => `expected ${received} not to be a valid risk score (0-100)`,
        pass: true,
      };
    } else {
      return {
        message: () => `expected ${received} to be a valid risk score (0-100)`,
        pass: false,
      };
    }
  },
  
  toBeValidBiomarker(received: any) {
    const hasRequiredFields = received && 
      typeof received.jitter === 'object' &&
      typeof received.shimmer === 'object' &&
      typeof received.hnr === 'object' &&
      typeof received.f0 === 'object';
    
    if (hasRequiredFields) {
      return {
        message: () => `expected biomarker object to be invalid`,
        pass: true,
      };
    } else {
      return {
        message: () => `expected biomarker object to have required fields (jitter, shimmer, hnr, f0)`,
        pass: false,
      };
    }
  }
});

// Global test configuration
beforeAll(() => {
  // Set test environment variables
  process.env.NODE_ENV = 'test';
  process.env.TWILIO_ACCOUNT_SID = 'test_account_sid';
  process.env.TWILIO_AUTH_TOKEN = 'test_auth_token';
  process.env.TWILIO_PHONE_NUMBER = '+18445551234';
  process.env.NEXT_PUBLIC_BASE_URL = 'http://localhost:3002';
  
  // Mock console methods to reduce noise in tests
  jest.spyOn(console, 'log').mockImplementation(() => {});
  jest.spyOn(console, 'info').mockImplementation(() => {});
  jest.spyOn(console, 'warn').mockImplementation(() => {});
  
  // Keep error logs for debugging
  const originalError = console.error;
  jest.spyOn(console, 'error').mockImplementation((...args) => {
    if (process.env.JEST_VERBOSE === 'true') {
      originalError(...args);
    }
  });
});

afterAll(() => {
  // Restore console methods
  jest.restoreAllMocks();
});

// Global test utilities
global.testUtils = {
  // Generate test patient data
  createTestPatient: (overrides = {}) => ({
    demographics: {
      firstName: 'Test',
      lastName: 'Patient',
      phoneNumber: '555-123-4567',
      dateOfBirth: '1980-01-01',
      gender: 'male',
      ...overrides.demographics
    },
    medicalHistory: {
      heartFailureType: 'systolic',
      ejectionFraction: 35,
      nyhaClass: 'II',
      ...overrides.medicalHistory
    },
    assignedClinician: 'clinician-test-123',
    ...overrides
  }),
  
  // Generate test voice analysis data
  createTestVoiceAnalysis: (overrides = {}) => ({
    patientId: 'patient-test-123',
    patientName: 'Test Patient',
    callSid: 'CA1234567890abcdef1234567890abcdef',
    timestamp: new Date().toISOString(),
    question: 'symptoms',
    transcript: 'This is a test transcript for voice analysis.',
    biomarkers: {
      jitter: { local: 0.018, rap: 0.016, ppq5: 0.020 },
      shimmer: { local: 0.055, apq3: 0.052, apq5: 0.058 },
      hnr: { mean: 15.2, std: 2.3 },
      f0: { mean: 145.8, std: 16.2, range: 78.5 },
      prosody: { speechRate: 138, pauseRate: 0.22, voicedRatio: 0.78 },
      spectral: { centroid: 1285, rolloff: 3150, slope: -7.8 }
    },
    riskScore: 42,
    duration: 30,
    analysisType: 'symptom_narrative',
    ...overrides
  }),
  
  // Generate test call data
  createTestCall: (overrides = {}) => ({
    patientId: 'patient-test-123',
    phoneNumber: '555-123-4567',
    patientName: 'Test Patient',
    ...overrides
  }),
  
  // Wait for async operations
  waitFor: (ms: number) => new Promise(resolve => setTimeout(resolve, ms)),
  
  // Validate clinical data ranges
  validateClinicalRanges: {
    riskScore: (score: number) => score >= 0 && score <= 100,
    ejectionFraction: (ef: number) => ef >= 0 && ef <= 100,
    jitter: (jitter: number) => jitter >= 0 && jitter < 0.1,
    shimmer: (shimmer: number) => shimmer >= 0 && shimmer < 0.2,
    hnr: (hnr: number) => hnr > 0 && hnr < 30,
    f0: (f0: number) => f0 > 50 && f0 < 500
  }
};

// Mock external services for testing
jest.mock('twilio', () => ({
  __esModule: true,
  default: jest.fn(() => ({
    calls: {
      create: jest.fn().mockResolvedValue({
        sid: 'CA1234567890abcdef1234567890abcdef',
        status: 'queued',
        to: '+15551234567',
        from: '+18445551234'
      }),
      get: jest.fn().mockResolvedValue({
        sid: 'CA1234567890abcdef1234567890abcdef',
        status: 'completed',
        duration: '30',
        startTime: new Date(),
        endTime: new Date()
      })
    },
    recordings: {
      get: jest.fn().mockResolvedValue({
        sid: 'RE1234567890abcdef1234567890abcdef',
        uri: '/test-recording.wav',
        duration: '30'
      })
    }
  }))
}));

// Mock file system operations
jest.mock('fs', () => ({
  existsSync: jest.fn().mockReturnValue(true),
  readFileSync: jest.fn().mockReturnValue('{"test": "data"}'),
  writeFileSync: jest.fn(),
  mkdirSync: jest.fn()
}));

// Mock Next.js request/response
global.mockNextRequest = (url: string, options: any = {}) => {
  return new Request(url, {
    method: options.method || 'GET',
    headers: options.headers || {},
    body: options.body || null
  });
};

// Type declarations for global utilities
declare global {
  var testUtils: {
    createTestPatient: (overrides?: any) => any;
    createTestVoiceAnalysis: (overrides?: any) => any;
    createTestCall: (overrides?: any) => any;
    waitFor: (ms: number) => Promise<void>;
    validateClinicalRanges: {
      riskScore: (score: number) => boolean;
      ejectionFraction: (ef: number) => boolean;
      jitter: (jitter: number) => boolean;
      shimmer: (shimmer: number) => boolean;
      hnr: (hnr: number) => boolean;
      f0: (f0: number) => boolean;
    };
  };
  
  var mockNextRequest: (url: string, options?: any) => Request;
  
  namespace jest {
    interface Matchers<R> {
      toBeValidPhoneNumber(): R;
      toBeValidRiskScore(): R;
      toBeValidBiomarker(): R;
    }
  }
}
